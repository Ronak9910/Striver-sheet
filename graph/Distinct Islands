Question:- You are given a two-dimensional array/list of integers consisting of 0s and 1s. In the list, 1 represents land and 0 represents water.
The task is to find the number of distinct islands where a group of connected 1s(horizontally or vertically) forms an island.
Note: Two islands are considered to be the same if and only if one island is equal to another(not rotated or reflected) i.e if we can translate one island on another without rotating or reflecting then it would be considered as the same islands. 

Link:- https://www.codingninjas.com/studio/problems/distinct-islands_630460?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM
Constraints:- 
 0 <= N <= 1000
 0 <= M <= 1000
 0 <= elements of array <= 1

Code:-
Approach 1 Using DFS:-
// Using set<pair<int, int>>
#include <bits/stdc++.h>
void dfs(int **arr, vector<vector<int>> &visited, vector<pair<int, int>> &temp, int n, int m, int row, int col, int startRow, int startCol)
{
    visited[startRow][startCol] = 1;
    temp.push_back({row - startRow, col - startCol});
    int del_row[] = {-1, 1, 0, 0};
    int del_col[] = {0, 0, -1, 1};
    for (int i = 0; i < 4; i++)
    {
        int newRow = row + del_row[i];
        int newCol = col + del_col[i];
        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && visited[newRow][newCol] == 0 && arr[newRow][newCol] == 1)
        {
            visited[newRow][newCol] = 1;
            temp.push_back({newRow - startRow, newCol - startCol});
            dfs(arr, visited, temp, n, m, newRow, newCol, startRow, startCol);
        }
    }
}
int distinctIslands(int **arr, int n, int m)
{
    vector<vector<int>> visited(n, vector<int>(m, 0));
    set<vector<pair<int, int>>> st;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (visited[i][j] == 0 && arr[i][j] == 1)
            {
                vector<pair<int, int>> temp;
                dfs(arr, visited, temp, n, m, i, j, i, j);
                st.insert(temp);
            }
        }
    }
    return st.size();
}
T.C = O(n*m) * log(n*m)
S.C = O(n*m)

// Using unordered_set<string>
#include <bits/stdc++.h>
int del_row[] = {-1, 1, 0, 0};
int del_col[] = {0, 0, -1, 1};
char del_name[] = {'l', 'u', 'r', 'd'};
void dfs(int **arr, vector<vector<int>> &visited, string &temp, int n, int m, int startRow, int startCol)
{
    visited[startRow][startCol] = 1;
    for (int i = 0; i < 4; i++)
    {
        int newRow = startRow + del_row[i];
        int newCol = startCol + del_col[i];
        if (newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && visited[newRow][newCol] == 0 && arr[newRow][newCol] == 1)
        {
            visited[newRow][newCol] = 1;
            temp += del_name[i];
            dfs(arr, visited, temp, n, m, newRow, newCol);
            temp += 'b';
        }
    }
}
int distinctIslands(int **arr, int n, int m)
{
    vector<vector<int>> visited(n, vector<int>(m, 0));
    unordered_set<string> st;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (visited[i][j] == 0 && arr[i][j] == 1)
            {
                string temp = "S";
                dfs(arr, visited, temp, n, m, i, j);
                st.insert(temp);
            }
        }
    }
    return st.size();
}
T.C = O(n*m)
S.C = O(n*m)

Approach 2 using BFS:-
#include <bits/stdc++.h>
void bfs(int **arr, vector<vector<int>> &visited, set<vector<pair<int, int>>> &st, int n, int m, int startRow, int startCol)
{
	queue<pair<int, int>> q;
	vector<pair<int, int>> temp;
	q.push({startRow, startCol});
	visited[startRow][startCol] = 1;
	temp.push_back({0, 0});
	int del_row[] = {-1, 1, 0, 0};
	int del_col[] = {0, 0, -1, 1};
	while(!q.empty())
	{
		int row = q.front().first;
		int col = q.front().second;
		q.pop();
		for(int i = 0; i < 4; i++)
		{
			int newRow = row + del_row[i];
			int newCol = col + del_col[i];
			if(newRow >= 0 && newRow < n && newCol >= 0 && newCol < m && visited[newRow][newCol] == 0 && arr[newRow][newCol] == 1)
			{
				visited[newRow][newCol] = 1;
				q.push({newRow, newCol});
				temp.push_back({newRow - startRow, newCol - startCol});
			}
		}
	}
	sort(temp.begin(), temp.end());
	st.insert(temp);
}
int distinctIslands(int** arr, int n, int m)
{
    vector<vector<int>> visited(n, vector<int> (m, 0));
	set<vector<pair<int, int>>> st;
	for(int i = 0; i < n; i++)
	{
		for(int j = 0; j < m; j++)
		{
			if(visited[i][j] == 0 && arr[i][j] == 1)
			{
				bfs(arr, visited, st, n, m, i, j);
			}
		}
	}
	return st.size();
}
T.C = O(n*m) * log(n*m)
S.C = O(n*m)
