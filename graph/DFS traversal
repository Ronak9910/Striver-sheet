Question:- Given an undirected and disconnected graph G(V, E), containing 'V' vertices and 'E' edges, the information about edges is given using 'GRAPH' matrix, where i-th edge is between GRAPH[i][0] and GRAPH[i][1]. print its DFS traversal.
V is the number of vertices present in graph G and vertices are numbered from 0 to V-1. 
E is the number of edges present in graph G.
Note :
The Graph may not be connected i.e there may exist multiple components in a graph.

Link:-https://www.codingninjas.com/studio/problems/dfs-traversal_630462?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=SUBMISSION
Code:-
void dfs(int node, vector<int> adj[], vector<int> &temp, vector<int> &visited)
{
    visited[node] = 1;
    temp.push_back(node);
    for (auto i : adj[node])
    {
        if (!visited[i])
        {
            dfs(i, adj, temp, visited);
        }
    }
}

vector<vector<int>> depthFirstSearch(int V, int E, vector<vector<int>> &edges)
{
    vector<int> adj[V];        // O(V + E)
    vector<int> visited(V, 0); // O(V)
    for (int i = 0; i < E; i++)
    {
        int u = edges[i][0];
        int v = edges[i][1];
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    vector<vector<int>> dfs_result; // O(E)
    for (int i = 0; i < V; i++)     // O(V + 2*E)
    {
        if (!visited[i])
        {
            vector<int> temp;
            dfs(i, adj, temp, visited);
            dfs_result.push_back(temp);
        }
    }

    return dfs_result;
}
T.C = O(V + 3*E)
S.C = O(2*V + 2*E)
