Question:- There is an undirected graph with n nodes, where each node is numbered between 0 and n - 1. You are given a 2D array graph, where graph[u] is an array of nodes that node u is adjacent to. More formally, for each v in graph[u], there is an undirected edge between node u and node v. The graph has the following properties:
->There are no self-edges (graph[u] does not contain u).
->There are no parallel edges (graph[u] does not contain duplicate values).
->If v is in graph[u], then u is in graph[v] (the graph is undirected).
->The graph may not be connected, meaning there may be two nodes u and v such that there is no path between them.
A graph is bipartite if the nodes can be partitioned into two independent sets A and B such that every edge in the graph connects a node in set A and a node in set B.
Return true if and only if it is bipartite

Link:- https://leetcode.com/problems/is-graph-bipartite/description/

Bipartite Graph:- Color the graph with two color such that no adjacent nodes have same color.
A graph will always a Bipartite graph if not contain any cycle with odd number of nodes.

Code:- 
Approach 1 Using DFS:-
class Solution
{
public:
    bool dfs(vector<vector<int>> &graph, int parent, vector<int> &color)
    {
        for(auto it : graph[parent])
        {
            if(color[it] == color[parent])
                return true;
            if(color[it] == -1)
            {
                color[it] = color[parent] ^ 1;
                if(dfs(graph, it, color))
                    return true;
            }
        }
        return false;
    }
    bool isBipartite(vector<vector<int>> &graph)
    {
        int V = graph.size();
        vector<int> color(V, -1);
        for (int i = 0; i < V; i++)
        {
            if (color[i] == -1)
            {
                color[i] = 0;
                if (dfs(graph, i, color))
                    return false;
            }
        }
        return true;
    }
};
T.C = O(V + 2*E)
S.C = O(2*V)

Approach 1 Using BFS:-
class Solution
{
public:
    bool bfs(vector<vector<int>> &graph, int parent, vector<int> &color)
    {
        queue<int> q;
        q.push(parent);
        while (!q.empty())
        {
            int node = q.front();
            q.pop();
            for (auto it : graph[node])
            {
                if (color[it] == color[node])
                    return true;
                if (color[it] == -1)
                {
                    color[it] = color[node] ^ 1;
                    q.push(it);
                }
            }
        }
        return false;
    }
    bool isBipartite(vector<vector<int>> &graph)
    {
        int V = graph.size();
        vector<int> color(V, -1);
        for (int i = 0; i < V; i++)
        {
            if (color[i] == -1)
            {
                color[i] = 0;
                if (bfs(graph, i, color))
                    return false;
            }
        }
        return true;
    }
};
T.C = O(V + 2*E)
S.C = O(2*V)
