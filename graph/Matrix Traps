Question:- Given a ’N*M’ matrix. Each cell in the matrix can have a value of either 0 or 1. You can start from any zero-valued cell and move to adjacent cells (up, down, left, or right) as long as the destination cell also has a value of 0.
An edge of the matrix is defined as the first row, the first column, the last row, or the last column. A trap cell is a cell where you can start but cannot reach an edge.
Return the number of trap cells.

Link:- https://www.codingninjas.com/studio/problems/matrix-traps_8365440?utm_source=striver&utm_medium=website&utm_campaign=a_zcoursetuf&leftPanelTabValue=PROBLEM
Code:-
int matrixTraps(int N, int M, vector<vector<int>> &arr)
{
    // Using BFS traversal
    // 0's which are connected with boundary are not trap cell, except all 0's are trap cell.
    vector<vector<int>> visited(N, vector<int>(M, 0));
    queue<pair<int, int>> q;
    for (int i = 0; i < N; i++) // O(N)
    {
        if (arr[i][0] == 0)
        {
            visited[i][0] = 1;
            q.push({i, 0});
        }
        if (arr[i][M - 1] == 0)
        {
            visited[i][M - 1] = 1;
            q.push({i, M - 1});
        }
    }
    for (int i = 0; i < M; i++) // O(M)
    {
        if (arr[0][i] == 0)
        {
            visited[0][i] = 1;
            q.push({0, i});
        }
        if (arr[N - 1][i] == 0)
        {
            visited[N - 1][i] = 1;
            q.push({N - 1, i});
        }
    }
    int del_row[] = {-1, 1, 0, 0};
    int del_col[] = {0, 0, 1, -1};
    while (!q.empty()) // O(N*M)
    {
        int row = q.front().first;
        int col = q.front().second;
        q.pop();
        for (int i = 0; i < 4; i++)
        {
            int newRow = row + del_row[i];
            int newCol = col + del_col[i];
            if (newRow >= 0 && newRow < N && newCol >= 0 && newCol < M && arr[newRow][newCol] == 0 && visited[newRow][newCol] == 0)
            {
                visited[newRow][newCol] = 1;
                q.push({newRow, newCol});
            }
        }
    }
    int numberOfTraps = 0;
    for (int i = 0; i < N; i++) // O(N*M)
    {
        for (int j = 0; j < M; j++)
        {
            if (arr[i][j] == 0 && visited[i][j] == 0)
                numberOfTraps++;
        }
    }
    return numberOfTraps;
}
T.C = O(N*M)
S.C = O(N*M)
