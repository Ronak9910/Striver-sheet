Question:- There is a frog on the '1st' step of an 'N' stairs long staircase. The frog wants to reach the 'Nth' stair. 
'HEIGHT[i]' is the height of the '(i+1)th' stair.If Frog jumps from 'ith' to 'jth' stair, the energy lost in the jump is given by absolute value of ( HEIGHT[i-1] - HEIGHT[j-1] ). 
If the Frog is on 'ith' staircase, he can jump either to '(i+1)th' stair or to '(i+2)th' stair. Your task is to find the minimum total energy used by the frog to reach from '1st' stair to 'Nth' stair.

Link:- https://www.codingninjas.com/studio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&leftPanelTabValue=PROBLEM
Constraints:
1 <= N <= 100000.
1 <= HEIGHTS[i] <= 1000

Code:-
Approach 1 Memoization:-
#include <bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    if (n == 1)
        return 0;
    vector<int> dp(n, INT_MAX);
    dp[n - 1] = 0;
    int prev2 = 0;
    int prev1 = abs(heights[n - 1] - heights[n - 2]);
    for (int i = n - 3; i >= 0; i--)
    {
        int val1 = abs(heights[i] - heights[i + 1]) + prev1;
        int val2 = abs(heights[i] - heights[i + 2]) + prev2;
        int temp = min(val1, val2);
        prev2 = prev1;
        prev1 = temp;
    }
    return prev1;
}
T.C = O(N)
S.C = O(N)

Approach 2 Tabulation:-
#include <bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n, INT_MAX);
    dp[n - 1] = 0;
    for (int i = n - 2; i >= 0; i--)
    {
        dp[i] = abs(heights[i] - heights[i + 1]) + dp[i + 1];
        if (i + 2 < n)
            dp[i] = min(dp[i], abs(heights[i] - heights[i + 2]) + dp[i + 2]);
    }
    return dp[0];
}
T.C = O(N)
S.C = O(N)

Approach 3 Space Optimization:-
#include <bits/stdc++.h>
int frogJump(int n, vector<int> &heights)
{
    if (n == 1)
        return 0;
    vector<int> dp(n, INT_MAX);
    dp[n - 1] = 0;
    int prev2 = 0;
    int prev1 = abs(heights[n - 1] - heights[n - 2]);
    for (int i = n - 3; i >= 0; i--)
    {
        int val1 = abs(heights[i] - heights[i + 1]) + prev1;
        int val2 = abs(heights[i] - heights[i + 2]) + prev2;
        int temp = min(val1, val2);
        prev2 = prev1;
        prev1 = temp;
    }
    return prev1;
}
T.C = O(N)
S.C = O(1)
